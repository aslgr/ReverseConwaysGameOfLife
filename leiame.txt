Relatório - Trabalho de Inteligência Artificial 2024/2

Alunos:
Arthur dos Santos Lima Gropp - GRR20211769
Luan Carlos Maia Cruz - GRR20203891

Primeiramente, é essencial rodar o comando "make install_kissat".
Este comando vai clonar e configurar o resolvedor SAT "kissat", necessário para o projeto.

Obs: RGSMLC = Reverse Game State with Minimum Live Cells.

1- Introdução:

Este projeto aborda a reversão do Jogo da Vida como um problema de satisfatibilidade booleana
(SAT). Utilizando a ferramenta SAT Solver “kissat”, implementamos uma solução que busca o
estado imediatamente anterior a um determinado tabuleiro dado na entrada, buscando minimizar o
número de células vivas.

2- Rodando o Programa:

Novamente ressaltamos a necessidade de executar o comando "make install_kissat" previamente,
estando no diretório principal “Reversing-GoL”. Em seguida, ainda no mesmo diretório, basta
compilar o programa através do “makefile”, utilizando o comando “make”. Por fim, o programa já
está pronto para ser executado. Basta rodá-lo da seguinte maneira:

“./ConwayGoLRSMLC < «seu_input»”

Substituindo «seu_input» pelo seu próprio input, claramente.
Pode substituir também por “inputs/inputEnunciado.txt”, caso queira utilizar o input dado pelo
professor no enunciado do trabalho. Ademais, alguns outros exemplos de entradas foram deixadas
no diretório “/inputs”, sendo estes um tabuleiro 8x8, um 13x13 e um 25x25.

3- Estrutura do Projeto e Estratégias Utilizadas:

3.1- Diretórios:

3.1.1- Reversing-GoL: O diretório principal.
3.1.2- /enunciado: Contém o enunciado do projeto.
3.1.3- /src: Contém os arquivos de código-fonte do programa.
3.1.4- /kissat: Inclui o SAT Solver “kissat”.
3.1.5- /inputs: Conjunto de inputs para testes e um binário para geração automatizada de instâncias.

3.2- Arquivos de Código-Fonte:

3.2.1- ConwayGoLRGSMLC.c:

O arquivo “ConwayGoLRGSMLC.c” é o programa principal que utiliza a lógica implementada nos
arquivos “rgsmlclib.c” e “rgsmlclib.h” para resolver o problema de reverter o estado do Conway’s
Game of Life.

Inicialmente, o programa lê do arquivo de entrada as dimensões e o estado inicial do tabuleiro.
Além disso, aloca espaço para o tabuleiro anterior a ele, que desejamos obter como resposta, assim
como para um vetor que armazenará as células vivas em determinados momentos da execução. Há
também uma matriz responsável pelo armazenamento das cláusulas, que é inicializada em NULL.

Partindo para execução do núcleo do código, a função “solve_conway_gol” é chamada.
Abordaremos essa função com mais detalhes quando chegarmos ao arquivo “rgsmlclib.c”, mas o
seu objetivo é, resumidamente, o de aplicar as regras do Conway’s Game of Life nas células do
tabuleiro de entrada, a fim de criar as cláusulas necessárias para que o SAT solver possa encontrar
tabuleiros anteriores válidos. Essas cláusulas geradas são armazenadas na matriz de cláusulas. Após
isso, o solver é iniciado a partir da função “kissat_init”, as cláusulas são passadas da matriz ao
solver através de “write_clause_aux”, cujo funcionamento será também abordado mais tarde, e com
base nessas cláusulas o solver tentará encontrar um tabuleiro válido por meio da função
“kissat_solve”.

Em uma variável, guardamos o atual mínimo número de células vivas encontradas em um tabuleiro.
Ademais, capturamos o tempo inicial para evitar que o SAT solver permaneça mais do que os 300
segundos a ele dados buscando por uma solução mínima. O loop para encontrar o tabuleiro mínimo
funciona da seguinte maneira: primeiramente, verificamos se a solução encontrada é SAT, ou seja,
se satisfaz todas as restrições. Caso seja UNSAT ou indeterminada logo de primeira, uma flag
indica ao programa que nenhum tabuleiro pôde ser encontrado como resposta, e o programa é
finalizado. Contudo, caso tudo ocorra conforme o esperado, averiguamos se o tempo limite de 300
segundos já foi atingido. Caso sim, o loop é interrompido e o SAT solver nos entrega a melhor
solução que encontrou até aquele ponto da execução. Caso contrário, damos prosseguimento
analisando o tabuleiro encontrado pelo “kissat”. Nessa análise, contabilizamos o número de células
vivas na solução e salvamos essas variáveis positivas no vetor responsável por armazená-las. Na
sequência, averiguamos se a quantidade de células vivas no tabuleiro resposta atual é menor do que
a quantidade mínima de células vivas encontrada até o momento. Caso o tabuleiro atual seja o novo
mínimo, a variável responsável por armazenar esse valor é atualizada, e o tabuleiro é salvo. O
resolvedor é então liberado, e reinicializado. Isso ocorre pois o “kissat” não permite que novas
cláusulas sejam adicionadas após o solver já ter sido chamado para solucionar o problema. Uma
nova cláusula é então adicionada à matriz de cláusulas através da função “add_live_cells_limit”,
sendo essa cláusula simplesmente um “OU” entre todas as células vivas do tabuleiro atual negadas.
Dessa forma, o resolvedor não poderá escolher o mesmo tabuleiro que acabou de encontrar, nem
qualquer tabuleiro anteriormente achado. Todas as cláusulas, tanto referentes às regras do Jogo da
Vida como as de poda, são novamente passadas da matriz ao novo resolvedor por meio da função
“write_clause_aux”. Com base nesse novo conjunto de cláusulas, o “kissat” novamente tentará
encontrar um tabuleiro válido. Por fim, o loop itera novamente, até que não hajam mais soluções a
serem encontradas ou até que o limite de tempo seja alcançado.

Ao final de tudo, o tabuleiro mínimo encontrado é impresso na tela.

3.2.2- rgsmlclib.c:

Essa biblioteca é responsável por implementar as funções utilizadas pelo
“ConwayGoLRGSMLC.c” para reverter o estado do Conway’s Game of Life. Vamos abordar cada
uma dessas funções com mais detalhes:

- print_grid: Imprime um tabuleiro de ‘n’ linhas por ‘m’ colunas.

- add_row: Adiciona uma nova linha na matriz dinâmica de cláusulas CNF. Realoca memória para incluir 
a nova linha e incrementa o número de cláusulas.- write_clause: Adiciona uma cláusula ao solver SAT.
Cada literal da cláusula é adicionado, seguido por um 0, que indica o fim da cláusula.

- write_clause_aux: Escreve múltiplas cláusulas no solver SAT, convertendo a matriz dinâmica de
cláusulas para o formato esperado pelo solver, e usando “write_clause” para adicionar cada uma.

- is_valid: Verifica se uma célula está dentro dos limites da matriz. É usada para validar posições
durante a análise de vizinhos.

- operations: Implementa as regras do Game of Life. Calcula combinações de vizinhos vivos/mortos
e cria cláusulas CNF para cada regra, com base no artigo “Time-Reversal in Conway’s Life as
SAT”, escrito por Stuart Bain e divulgado pelo professor Fabiano Silva.

-- A regra Loneliness(x,n) = ⋀(c ∈ P7(n)) (⋁c) nos diz que uma célula com menos de 2 vizinhos vivos
(pelo menos 7 mortos) em t0 estará morta em t1, independente de seu estado atual. Nesse sentido, a
implementação itera pelas combinações de vizinhos e, se alive_count == 1, adiciona uma cláusula
na matriz dinâmica com os 7 vizinhos mortos positivos.

-- A regra Stagnation(x,n) = ⋀(c ∈ P2(n)) (x ∨ ⋁¬c ∨ ⋁(n−c)) nos diz que uma célula morta com
exatamente 2 vizinhos vivos em t0 permanecerá morta em t1. Nesse sentido, a implementação itera
pelas combinações de vizinhos e, se alive_count == 2, adiciona uma cláusula na matriz dinâmica
com a própria célula ‘x’ positiva, juntamente com os 2 vizinhos vivos negativos e os vizinhos
mortos positivos.

-- A regra Overcrowding(x,n) = ⋀(c ∈ P4(n)) (⋁¬c) nos diz que uma célula com 4 ou mais vizinhos
vivos em t0 estará morta em t1, independente de seu estado atual. Nesse sentido, a implementação
itera pelas combinações de vizinhos e, se alive_count == 4, adiciona uma cláusula na matriz
dinâmica com os 4 vizinhos vivos negativos.

-- A regra Preservation(x,n) = ⋀(c ∈ P2(n)) (¬x ∨ ⋁¬c ∨ ⋁(n−c)) nos diz que uma célula viva com
exatamente 2 vizinhos vivos em t0 permanecerá viva em t1. Nesse sentido, a implementação itera
pelas combinações de vizinhos e, se alive_count == 2, adiciona uma cláusula na matriz dinâmica
com a própria célula ‘x’ negativa, juntamente com os 2 vizinhos vivos negativos e os vizinhos
mortos positivos.

-- A regra Life(x,n) = ⋀(c ∈ P3(n)) (⋁¬c ∨ ⋁(n−c)) nos diz que uma célula com exatamente 3
vizinhos vivos em t0 estará viva em t1, independente de seu estado atual. Nesse sentido, a
implementação itera pelas combinações de vizinhos e, se alive_count == 3, adiciona uma cláusula
na matriz dinâmica com os 3 vizinhos vivos negativos e os vizinhos mortos positivos.

- solve_conway_gol: Gera as cláusulas CNF para o estado inicial de um tabuleiro, baseado nas
regras do Game of Life. Itera sobre cada célula e aplica as operações apropriadas por meio da
função “operations”.

- add_live_cells_limit: Adiciona uma cláusula para limitar o número máximo de células vivas no
próximo estado. É usada para minimizar o número de células vivas na solução e para impedir que o
resolvedor SAT fique em loop encontrando o mesmo tabuleiro resposta para sempre.

3.2.2- rgsmlclib.h:

Esse header declara funções e constantes utilizadas no contexto do programa.

4- Conclusão:

Neste projeto, exploramos a complexidade do problema de reversão do Conway’s Game of Life por
meio de uma abordagem de satisfatibilidade booleana. Utilizando o solver SAT “kissat” e
implementando regras precisas baseadas em lógica formal, conseguimos gerar soluções que não
apenas reconstroem o estado anterior de um tabuleiro, mas também minimizam o número de células
vivas.